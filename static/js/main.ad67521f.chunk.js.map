{"version":3,"sources":["components/Feedback/Statistics/Statistics.module.css","components/Feedback/FeedbackOptions/FeedbackOptions.module.css","components/Container/Container.module.css","components/Feedback/Feedback.module.css","components/Container/Container.jsx","components/Feedback/Statistics/Statistics.jsx","components/Feedback/FeedbackOptions/FeedbackOptions.jsx","components/Feedback/Section/Section.jsx","components/Feedback/Notification/Notification.jsx","components/Feedback/Feedback.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Container","children","className","s","container","Statistics","good","neutral","bad","total","positivePercentage","text","FeedbackOptions","options","onLeaveFeedback","array","data","key","push","createArray","feedbackDiv","map","el","Object","keys","type","name","onClick","Section","title","Notification","message","Feedback","useState","setGood","setNeutral","setBad","countTotalFeedback","state","div","e","target","prevState","callback","Math","round","countPositiveFeedbackPercentage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,YAAc,qCAAqC,KAAO,8BAA8B,KAAO,0DAA0D,QAAU,6DAA6D,IAAM,2D,iBCAxPD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,IAAM,wB,+HCcTC,MAZf,YAAkC,IAAbC,EAAY,EAAZA,SACjB,OACI,qBAAKC,UAAWC,IAAEC,UAAlB,SACKH,K,uCCsBEI,MAzBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OAAOJ,EAAOC,EAAUC,IAAQ,EAC9B,mBAAGN,UAAWC,IAAEQ,KAAhB,+DAEA,qCACE,oBAAGT,UAAWC,IAAEQ,KAAhB,mBAA6BL,KAC7B,oBAAGJ,UAAWC,IAAEQ,KAAhB,sBAAgCJ,KAChC,oBAAGL,UAAWC,IAAEQ,KAAhB,kBAA4BH,KAC5B,oBAAGN,UAAWC,IAAEQ,KAAhB,oBAA8BF,KAC9B,oBAAGP,UAAWC,IAAEQ,KAAhB,+BAEGD,EAFH,W,uBC0BSE,MAnCf,YAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAS5BC,EAPc,SAACC,GACnB,IAAMD,EAAQ,GACd,IAAK,IAAME,KAAOD,EAChBD,EAAMG,KAAN,eAAcD,EAAMD,EAAKC,KAE3B,OAAOF,EAEKI,CAAYN,GAC1B,OACE,qBAAKX,UAAWC,IAAEiB,YAAlB,SACML,EAAMM,KAAI,SAACC,GACX,IAAML,EAAMM,OAAOC,KAAKF,GACxB,OACE,wBACEG,KAAK,SACLC,KAAMT,EACNU,QAASb,EAETZ,UAAWC,IAAEc,GALf,SAOGA,GAHIA,SCPJW,MAbf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAO5B,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAK4B,IACJ5B,MCMQ6B,MAVf,YAAmC,IAAXC,EAAU,EAAVA,QACtB,OACE,4BAAIA,KCoEOC,MAhEf,WACE,MAAwBC,mBAAS,GAAjC,mBAAO3B,EAAP,KAAa4B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO1B,EAAP,KAAgB4B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOzB,EAAP,KAAY4B,EAAZ,KAEMC,EAAqB,SAAC,GAC1B,OADqD,EAAzB/B,KAAyB,EAAnBC,QAAmB,EAAVC,KA+BvC8B,EAAQ,CAAChC,OAAMC,UAASC,OAE9B,OACE,sBAAKN,UAAWC,IAAEoC,IAAlB,UACE,cAAC,EAAD,CAASV,MAAM,yBAAf,SACE,cAAC,EAAD,CAAiBhB,QAASyB,EAAOxB,gBAzBf,SAAC0B,GAEvB,OADeA,EAAEC,OAAOf,MAEtB,IAAK,OACHQ,GAAQ,SAACQ,GAAD,OAAeA,EAAY,KACnC,MAEF,IAAK,UACHP,GAAW,SAACO,GAAD,OAAeA,EAAY,KACtC,MAEF,IAAK,MACHN,GAAO,SAACM,GAAD,OAAeA,EAAY,KAClC,MAEF,QACE,aAYF,cAAC,EAAD,CAASb,MAAM,aAAf,SACiC,IAA9BQ,EAAmBC,GAClB,cAAC,EAAD,CAAcP,QAAQ,sBAEtB,cAAC,EAAD,CACEzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO4B,EAAmBC,GAC1B5B,mBA5C8B,SACtCiC,EADsC,GAGlC,IADFrC,EACC,EADDA,KAAMC,EACL,EADKA,QAASC,EACd,EADcA,IAEjB,OAAOoC,KAAKC,MAAOvC,EAAOqC,EAAS,CAAErC,OAAMC,UAASC,QAAU,KAwClCsC,CAClBT,EACAC,WCpDCS,MARf,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad67521f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__tcT0O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackDiv\":\"FeedbackOptions_feedbackDiv__lvxwF\",\"item\":\"FeedbackOptions_item___8k_i\",\"good\":\"FeedbackOptions_good__nWpTO FeedbackOptions_item___8k_i\",\"neutral\":\"FeedbackOptions_neutral__3UPbN FeedbackOptions_item___8k_i\",\"bad\":\"FeedbackOptions_bad__PsG4R FeedbackOptions_item___8k_i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3vroq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Feedback_div__2yAdB\"};","import s from \"./Container.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Container({ children }) {\r\n    return (\r\n        <div className={s.container}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.oneOfType([PropTypes.array, PropTypes.object])\r\n}\r\n\r\nexport default Container;","import PropTypes from \"prop-types\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return good + neutral + bad === 0 ? (\r\n    <p className={s.text}>There are no feedbacks yet! Yours could be first!</p>\r\n  ) : (\r\n    <>\r\n      <p className={s.text}>Good: {good}</p>\r\n      <p className={s.text}>Neutral: {neutral}</p>\r\n      <p className={s.text}>Bad: {bad}</p>\r\n      <p className={s.text}>Total: {total}</p>\r\n      <p className={s.text}>\r\n        Positive feedback:\r\n        {positivePercentage}%\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\n\r\nfunction FeedbackOptions ({options, onLeaveFeedback}) {\r\n\r\n  const createArray = (data) => {\r\n    const array = [];\r\n    for (const key in data) {\r\n      array.push({ [key]: data[key] });\r\n    }\r\n    return array;\r\n  }\r\n  const array = createArray(options);\r\n  return (\r\n    <div className={s.feedbackDiv}>\r\n         {array.map((el) => {\r\n          const key = Object.keys(el);\r\n          return (\r\n            <button\r\n              type=\"button\"\r\n              name={key}\r\n              onClick={onLeaveFeedback}\r\n              key={key}\r\n              className={s[key]}\r\n            >\r\n              {key}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n  )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.objectOf(PropTypes.number),\r\n  onLeaveFeedback: PropTypes.func\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Notification ({message}) {\r\n  return (\r\n    <p>{message}</p>\r\n  )\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n}\r\n\r\nexport default Notification;\r\n","\r\nimport { useState } from \"react\";\r\nimport s from \"./Feedback.module.css\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\nimport Notification from \"./Notification\";\r\n\r\nfunction Feedback() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const countTotalFeedback = ({ good, neutral, bad }) => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = (\r\n    callback,\r\n    { good, neutral, bad }\r\n  ) => {\r\n    return Math.round((good / callback({ good, neutral, bad })) * 100);\r\n  };\r\n\r\n  const onLeaveFeedback = (e) => {\r\n    const target = e.target.name;\r\n    switch (target) {\r\n      case \"good\":\r\n        setGood((prevState) => prevState + 1);\r\n        break;\r\n\r\n      case \"neutral\":\r\n        setNeutral((prevState) => prevState + 1);\r\n        break;\r\n\r\n      case \"bad\":\r\n        setBad((prevState) => prevState + 1);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const state = {good, neutral, bad};\r\n\r\n  return (\r\n    <div className={s.div}>\r\n      <Section title=\"Please leave feedback!\">\r\n        <FeedbackOptions options={state} onLeaveFeedback={onLeaveFeedback} />\r\n      </Section>\r\n\r\n      <Section title=\"Statistics\">\r\n        {countTotalFeedback(state) === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback(state)}\r\n            positivePercentage={countPositiveFeedbackPercentage(\r\n              countTotalFeedback,\r\n              state\r\n            )}\r\n          />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feedback;\r\n","import Container from './components/Container';\nimport Feedback from './components/Feedback'\n\nfunction App() {\n  return (\n    <Container>\n      <Feedback />\n    </Container>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}